//
// ApiAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ApiAPI: APIBase {
    /**

     - parameter country: (query) Country code to filter results 
     - parameter search: (query) Search term for autocomplete 
     - parameter language: (query) Preferred language for results 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiAutocompleteList(country country: String, search: String, language: String, completion: ((data: FlightAutocompleteResponseBodyModel?, error: ErrorType?) -> Void)) {
        apiAutocompleteListWithRequestBuilder(country: country, search: search, language: language).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /api/autocomplete/
     - Fetch autocomplete locations based on country and search query.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter country: (query) Country code to filter results 
     - parameter search: (query) Search term for autocomplete 
     - parameter language: (query) Preferred language for results 

     - returns: RequestBuilder<FlightAutocompleteResponseBodyModel> 
     */
    public class func apiAutocompleteListWithRequestBuilder(country country: String, search: String, language: String) -> RequestBuilder<FlightAutocompleteResponseBodyModel> {
        let path = "/api/autocomplete/"
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "country": country,
            "search": search,
            "language": language
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FlightAutocompleteResponseBodyModel>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter code: (query) code (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiCountriesList(code code: String? = nil, page: Int32? = nil, limit: Int32? = nil, completion: ((data: FlightInlineResponse200?, error: ErrorType?) -> Void)) {
        apiCountriesListWithRequestBuilder(code: code, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /api/countries/
     - 
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter code: (query) code (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)

     - returns: RequestBuilder<FlightInlineResponse200> 
     */
    public class func apiCountriesListWithRequestBuilder(code code: String? = nil, page: Int32? = nil, limit: Int32? = nil) -> RequestBuilder<FlightInlineResponse200> {
        let path = "/api/countries/"
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "code": code,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FlightInlineResponse200>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiCurrenciesList(ordering ordering: String? = nil, search: String? = nil, page: Int32? = nil, limit: Int32? = nil, completion: ((data: FlightInlineResponse2001?, error: ErrorType?) -> Void)) {
        apiCurrenciesListWithRequestBuilder(ordering: ordering, search: search, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /api/currencies/
     - 
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)

     - returns: RequestBuilder<FlightInlineResponse2001> 
     */
    public class func apiCurrenciesListWithRequestBuilder(ordering ordering: String? = nil, search: String? = nil, page: Int32? = nil, limit: Int32? = nil) -> RequestBuilder<FlightInlineResponse2001> {
        let path = "/api/currencies/"
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "ordering": ordering,
            "search": search,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FlightInlineResponse2001>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter data: (body)  
     - parameter currency: (query) Currency code to be used 
     - parameter country: (query) Country code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiExploreCreate(data data: FlightPriceInsightRequestCustomDrf, currency: String, country: String, completion: ((data: FlightPriceInsightResponseModel?, error: ErrorType?) -> Void)) {
        apiExploreCreateWithRequestBuilder(data: data, currency: currency, country: country).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /api/explore/
     - Get price insights for a months.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter data: (body)  
     - parameter currency: (query) Currency code to be used 
     - parameter country: (query) Country code 

     - returns: RequestBuilder<FlightPriceInsightResponseModel> 
     */
    public class func apiExploreCreateWithRequestBuilder(data data: FlightPriceInsightRequestCustomDrf, currency: String, country: String) -> RequestBuilder<FlightPriceInsightResponseModel> {
        let path = "/api/explore/"
        let URLString = FlightSwaggerClientAPI.basePath + path
        let parameters = data.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FlightPriceInsightResponseModel>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter arrivalType
     */
    public enum FlightArrivalType_apiExploreList: String { 
        case Country = "country"
        case City = "city"
        case Airport = "airport"
    }

    /**

     - parameter country: (query) Country code 
     - parameter currency: (query) Currency code 
     - parameter departure: (query) Departure airport code 
     - parameter language: (query) Preferred language 
     - parameter arrivalType: (query) Arrival type 
     - parameter fromDate: (query) Start date for exploration (YYYY-MM-DD) (optional)
     - parameter toDate: (query) End date for exploration (YYYY-MM-DD) (optional)
     - parameter arrivalId: (query) Arrival id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiExploreList(country country: String, currency: String, departure: String, language: String, arrivalType: FlightArrivalType_apiExploreList, fromDate: String? = nil, toDate: String? = nil, arrivalId: String? = nil, completion: ((data: FlightExploreResponseModel?, error: ErrorType?) -> Void)) {
        apiExploreListWithRequestBuilder(country: country, currency: currency, departure: departure, language: language, arrivalType: arrivalType, fromDate: fromDate, toDate: toDate, arrivalId: arrivalId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /api/explore/
     - Get explore destinations
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter country: (query) Country code 
     - parameter currency: (query) Currency code 
     - parameter departure: (query) Departure airport code 
     - parameter language: (query) Preferred language 
     - parameter arrivalType: (query) Arrival type 
     - parameter fromDate: (query) Start date for exploration (YYYY-MM-DD) (optional)
     - parameter toDate: (query) End date for exploration (YYYY-MM-DD) (optional)
     - parameter arrivalId: (query) Arrival id (optional)

     - returns: RequestBuilder<FlightExploreResponseModel> 
     */
    public class func apiExploreListWithRequestBuilder(country country: String, currency: String, departure: String, language: String, arrivalType: FlightArrivalType_apiExploreList, fromDate: String? = nil, toDate: String? = nil, arrivalId: String? = nil) -> RequestBuilder<FlightExploreResponseModel> {
        let path = "/api/explore/"
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "country": country,
            "currency": currency,
            "departure": departure,
            "from_date": fromDate,
            "to_date": toDate,
            "language": language,
            "arrival_type": arrivalType.rawValue,
            "arrival_id": arrivalId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FlightExploreResponseModel>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter data: (body)  
     - parameter currency: (query) Currency code to be used 
     - parameter country: (query) Country code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiExploreOldCreate(data data: FlightPriceInsightRequestCustomDrf, currency: String, country: String, completion: ((data: FlightPriceInsightResponseModel?, error: ErrorType?) -> Void)) {
        apiExploreOldCreateWithRequestBuilder(data: data, currency: currency, country: country).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /api/explore-old/
     - Get price insights for a months.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter data: (body)  
     - parameter currency: (query) Currency code to be used 
     - parameter country: (query) Country code 

     - returns: RequestBuilder<FlightPriceInsightResponseModel> 
     */
    public class func apiExploreOldCreateWithRequestBuilder(data data: FlightPriceInsightRequestCustomDrf, currency: String, country: String) -> RequestBuilder<FlightPriceInsightResponseModel> {
        let path = "/api/explore-old/"
        let URLString = FlightSwaggerClientAPI.basePath + path
        let parameters = data.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FlightPriceInsightResponseModel>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter arrivalType
     */
    public enum FlightArrivalType_apiExploreOldList: String { 
        case Country = "country"
        case City = "city"
        case Airport = "airport"
    }

    /**

     - parameter country: (query) Country code 
     - parameter currency: (query) Currency code 
     - parameter departure: (query) Departure airport code 
     - parameter language: (query) Preferred language 
     - parameter arrivalType: (query) Arrival type 
     - parameter fromDate: (query) Start date for exploration (YYYY-MM-DD) (optional)
     - parameter toDate: (query) End date for exploration (YYYY-MM-DD) (optional)
     - parameter arrivalId: (query) Arrival id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiExploreOldList(country country: String, currency: String, departure: String, language: String, arrivalType: FlightArrivalType_apiExploreOldList, fromDate: String? = nil, toDate: String? = nil, arrivalId: String? = nil, completion: ((data: FlightExploreResponseModel?, error: ErrorType?) -> Void)) {
        apiExploreOldListWithRequestBuilder(country: country, currency: currency, departure: departure, language: language, arrivalType: arrivalType, fromDate: fromDate, toDate: toDate, arrivalId: arrivalId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /api/explore-old/
     - Get explore destinations
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter country: (query) Country code 
     - parameter currency: (query) Currency code 
     - parameter departure: (query) Departure airport code 
     - parameter language: (query) Preferred language 
     - parameter arrivalType: (query) Arrival type 
     - parameter fromDate: (query) Start date for exploration (YYYY-MM-DD) (optional)
     - parameter toDate: (query) End date for exploration (YYYY-MM-DD) (optional)
     - parameter arrivalId: (query) Arrival id (optional)

     - returns: RequestBuilder<FlightExploreResponseModel> 
     */
    public class func apiExploreOldListWithRequestBuilder(country country: String, currency: String, departure: String, language: String, arrivalType: FlightArrivalType_apiExploreOldList, fromDate: String? = nil, toDate: String? = nil, arrivalId: String? = nil) -> RequestBuilder<FlightExploreResponseModel> {
        let path = "/api/explore-old/"
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "country": country,
            "currency": currency,
            "departure": departure,
            "from_date": fromDate,
            "to_date": toDate,
            "language": language,
            "arrival_type": arrivalType.rawValue,
            "arrival_id": arrivalId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FlightExploreResponseModel>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter data: (body)  
     - parameter searchId: (query) Search id from search initializer 
     - parameter limit: (query) Number of records to return per page (optional)
     - parameter page: (query) Page number to return (optional)
     - parameter airlineIata: (query) Airline IATA code to filter by (For extension only) (optional)
     - parameter flightNumber: (query) Flight number to filter by (For extension only) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiPollCreate(data data: FlightPollRequestBodyModel, searchId: String, limit: String? = nil, page: String? = nil, airlineIata: String? = nil, flightNumber: String? = nil, completion: ((data: FlightPollResponseBodyModel?, error: ErrorType?) -> Void)) {
        apiPollCreateWithRequestBuilder(data: data, searchId: searchId, limit: limit, page: page, airlineIata: airlineIata, flightNumber: flightNumber).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /api/poll/
     - Poll flight search results.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter data: (body)  
     - parameter searchId: (query) Search id from search initializer 
     - parameter limit: (query) Number of records to return per page (optional)
     - parameter page: (query) Page number to return (optional)
     - parameter airlineIata: (query) Airline IATA code to filter by (For extension only) (optional)
     - parameter flightNumber: (query) Flight number to filter by (For extension only) (optional)

     - returns: RequestBuilder<FlightPollResponseBodyModel> 
     */
    public class func apiPollCreateWithRequestBuilder(data data: FlightPollRequestBodyModel, searchId: String, limit: String? = nil, page: String? = nil, airlineIata: String? = nil, flightNumber: String? = nil) -> RequestBuilder<FlightPollResponseBodyModel> {
        let path = "/api/poll/"
        let URLString = FlightSwaggerClientAPI.basePath + path
        let parameters = data.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FlightPollResponseBodyModel>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter data: (body)  
     - parameter currency: (query) Currency code to be used 
     - parameter country: (query) Country code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiPriceCreate(data data: FlightPriceInsightRequestCustomDrf, currency: String, country: String, completion: ((data: FlightPriceInsightResponseModel?, error: ErrorType?) -> Void)) {
        apiPriceCreateWithRequestBuilder(data: data, currency: currency, country: country).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /api/price/
     - Get price insights for a route over three consecutive months.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter data: (body)  
     - parameter currency: (query) Currency code to be used 
     - parameter country: (query) Country code 

     - returns: RequestBuilder<FlightPriceInsightResponseModel> 
     */
    public class func apiPriceCreateWithRequestBuilder(data data: FlightPriceInsightRequestCustomDrf, currency: String, country: String) -> RequestBuilder<FlightPriceInsightResponseModel> {
        let path = "/api/price/"
        let URLString = FlightSwaggerClientAPI.basePath + path
        let parameters = data.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FlightPriceInsightResponseModel>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter data: (body)  
     - parameter country: (header) Country code 
     - parameter userId: (query) User id from MHD&#39;s server 
     - parameter language: (query) Preferred language 
     - parameter appCode: (query) Application code from backend for the project 
     - parameter currency: (query) Currency code to be used (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiSearchCreate(data data: FlightFlightSearchRequestBodyModel, country: String, userId: String, language: String, appCode: String, currency: String? = nil, completion: ((data: FlightFlightSearchResponseModel?, error: ErrorType?) -> Void)) {
        apiSearchCreateWithRequestBuilder(data: data, country: country, userId: userId, language: language, appCode: appCode, currency: currency).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /api/search/
     - Initiates flight search.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter data: (body)  
     - parameter country: (header) Country code 
     - parameter userId: (query) User id from MHD&#39;s server 
     - parameter language: (query) Preferred language 
     - parameter appCode: (query) Application code from backend for the project 
     - parameter currency: (query) Currency code to be used (optional)

     - returns: RequestBuilder<FlightFlightSearchResponseModel> 
     */
    public class func apiSearchCreateWithRequestBuilder(data data: FlightFlightSearchRequestBodyModel, country: String, userId: String, language: String, appCode: String, currency: String? = nil) -> RequestBuilder<FlightFlightSearchResponseModel> {
        let path = "/api/search/"
        let URLString = FlightSwaggerClientAPI.basePath + path
        let parameters = data.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "country": country
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<FlightFlightSearchResponseModel>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiSearchDelete(completion: ((error: ErrorType?) -> Void)) {
        apiSearchDeleteWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - DELETE /api/search/delete/
     - API endpoint for initiating a flight search.
     - BASIC:
       - type: basic
       - name: Basic

     - returns: RequestBuilder<Void> 
     */
    public class func apiSearchDeleteWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/search/delete/"
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func apiSearchDelete_0(id id: String, completion: ((error: ErrorType?) -> Void)) {
        apiSearchDelete_0WithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - DELETE /api/search/{id}/
     - API endpoint for initiating a flight search.
     - BASIC:
       - type: basic
       - name: Basic
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    public class func apiSearchDelete_0WithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/api/search/{id}/"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
