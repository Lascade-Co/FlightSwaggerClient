//
// AppAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AppAPI {
    /**

     - parameter app: (query) app (optional)
     - parameter country: (query) country (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appSetupList(app: String? = nil, country: String? = nil, page: Int? = nil, completion: @escaping ((_ data: FlightInlineResponse2002?,_ error: Error?) -> Void)) {
        appSetupListWithRequestBuilder(app: app, country: country, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /app/setup/
     - 
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter app: (query) app (optional)
     - parameter country: (query) country (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)

     - returns: RequestBuilder<FlightInlineResponse2002> 
     */
    open class func appSetupListWithRequestBuilder(app: String? = nil, country: String? = nil, page: Int? = nil) -> RequestBuilder<FlightInlineResponse2002> {
        let path = "/app/setup/"
        let URLString = FlightSwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "app": app, 
            "country": country, 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<FlightInlineResponse2002>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
