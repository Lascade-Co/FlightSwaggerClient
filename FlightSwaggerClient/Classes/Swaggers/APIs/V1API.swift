//
// V1API.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class V1API: APIBase {
    /**

     - parameter search: (query) A search term. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1AirlinesList(search search: String? = nil, page: Int32? = nil, limit: Int32? = nil, completion: ((data: InlineResponse200?, error: ErrorType?) -> Void)) {
        v1AirlinesListWithRequestBuilder(search: search, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /v1/airlines/
     - List and search airports based on query parameters.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter search: (query) A search term. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)

     - returns: RequestBuilder<InlineResponse200> 
     */
    public class func v1AirlinesListWithRequestBuilder(search search: String? = nil, page: Int32? = nil, limit: Int32? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/v1/airlines/"
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "search": search,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse200>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter search: (query) A search term. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1AirportsList(search search: String? = nil, page: Int32? = nil, limit: Int32? = nil, completion: ((data: InlineResponse2001?, error: ErrorType?) -> Void)) {
        v1AirportsListWithRequestBuilder(search: search, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /v1/airports/
     - List and search airports based on query parameters.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter search: (query) A search term. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    public class func v1AirportsListWithRequestBuilder(search search: String? = nil, page: Int32? = nil, limit: Int32? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/v1/airports/"
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "search": search,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1FcmTestCreate(completion: ((error: ErrorType?) -> Void)) {
        v1FcmTestCreateWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - POST /v1/fcm-test/
     - Send a test FCM notification.
     - BASIC:
       - type: basic
       - name: Basic

     - returns: RequestBuilder<Void> 
     */
    public class func v1FcmTestCreateWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/v1/fcm-test/"
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter latitude: (query) Latitude of center 
     - parameter longitude: (query) Longitude of center 
     - parameter radius: (query) Radius to search (in kilometers) 
     - parameter authorization: (header) User ID 
     - parameter page: (query) Page number for pagination, default is 1 (optional)
     - parameter limit: (query) Number of items per page, default is 30 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1FlightsList(latitude latitude: Double, longitude: Double, radius: Double, authorization: String, page: Int32? = nil, limit: Int32? = nil, completion: ((data: [RealtimeFlights]?, error: ErrorType?) -> Void)) {
        v1FlightsListWithRequestBuilder(latitude: latitude, longitude: longitude, radius: radius, authorization: authorization, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /v1/flights/
     - Get all flights within a specified radius from a given geographic point.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={}}]
     
     - parameter latitude: (query) Latitude of center 
     - parameter longitude: (query) Longitude of center 
     - parameter radius: (query) Radius to search (in kilometers) 
     - parameter authorization: (header) User ID 
     - parameter page: (query) Page number for pagination, default is 1 (optional)
     - parameter limit: (query) Number of items per page, default is 30 (optional)

     - returns: RequestBuilder<[RealtimeFlights]> 
     */
    public class func v1FlightsListWithRequestBuilder(latitude latitude: Double, longitude: Double, radius: Double, authorization: String, page: Int32? = nil, limit: Int32? = nil) -> RequestBuilder<[RealtimeFlights]> {
        let path = "/v1/flights/"
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "latitude": latitude,
            "longitude": longitude,
            "radius": radius
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<[RealtimeFlights]>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter id: (path) A unique value identifying this realtime flight. 
     - parameter authorization: (header) User ID 
     - parameter isFlightIata: (query) Is ID flight IATA or Hex code (optional, default to false)
     - parameter cacheKey: (query) Cache key, used for polling (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1FlightsRead(id id: String, authorization: String, isFlightIata: Bool? = nil, cacheKey: String? = nil, completion: ((data: FlightInfoResponseModel?, error: ErrorType?) -> Void)) {
        v1FlightsReadWithRequestBuilder(id: id, authorization: authorization, isFlightIata: isFlightIata, cacheKey: cacheKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /v1/flights/{id}/
     - Get details of a specific flight.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter id: (path) A unique value identifying this realtime flight. 
     - parameter authorization: (header) User ID 
     - parameter isFlightIata: (query) Is ID flight IATA or Hex code (optional, default to false)
     - parameter cacheKey: (query) Cache key, used for polling (optional)

     - returns: RequestBuilder<FlightInfoResponseModel> 
     */
    public class func v1FlightsReadWithRequestBuilder(id id: String, authorization: String, isFlightIata: Bool? = nil, cacheKey: String? = nil) -> RequestBuilder<FlightInfoResponseModel> {
        var path = "/v1/flights/{id}/"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "is_flight_iata": isFlightIata,
            "cache_key": cacheKey
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<FlightInfoResponseModel>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter authorization: (header) User ID 
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter depId: (query) Departure IATA code (optional)
     - parameter arrId: (query) Arrival IATA code (optional)
     - parameter date: (query) Date in YYYYMMDD format (optional)
     - parameter airlineId: (query) Airline IATA code (optional)
     - parameter flightNumber: (query) Flight number (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1SchedulesList(authorization authorization: String, ordering: String? = nil, search: String? = nil, page: Int32? = nil, limit: Int32? = nil, depId: String? = nil, arrId: String? = nil, date: String? = nil, airlineId: String? = nil, flightNumber: String? = nil, completion: ((data: ScheduleResponseModel?, error: ErrorType?) -> Void)) {
        v1SchedulesListWithRequestBuilder(authorization: authorization, ordering: ordering, search: search, page: page, limit: limit, depId: depId, arrId: arrId, date: date, airlineId: airlineId, flightNumber: flightNumber).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /v1/schedules/
     - Retrieve flight schedules by departure or arrival airport ID.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter authorization: (header) User ID 
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter depId: (query) Departure IATA code (optional)
     - parameter arrId: (query) Arrival IATA code (optional)
     - parameter date: (query) Date in YYYYMMDD format (optional)
     - parameter airlineId: (query) Airline IATA code (optional)
     - parameter flightNumber: (query) Flight number (optional)

     - returns: RequestBuilder<ScheduleResponseModel> 
     */
    public class func v1SchedulesListWithRequestBuilder(authorization authorization: String, ordering: String? = nil, search: String? = nil, page: Int32? = nil, limit: Int32? = nil, depId: String? = nil, arrId: String? = nil, date: String? = nil, airlineId: String? = nil, flightNumber: String? = nil) -> RequestBuilder<ScheduleResponseModel> {
        let path = "/v1/schedules/"
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "ordering": ordering,
            "search": search,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "dep_id": depId,
            "arr_id": arrId,
            "date": date,
            "airline_id": airlineId,
            "flight_number": flightNumber
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<ScheduleResponseModel>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter iataCode: (path)  
     - parameter authorization: (header) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1SchedulesRead(iataCode iataCode: String, authorization: String, completion: ((data: AirlineFlightBoardResponseModel?, error: ErrorType?) -> Void)) {
        v1SchedulesReadWithRequestBuilder(iataCode: iataCode, authorization: authorization).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /v1/schedules/{iataCode}/
     - Retrieve airline flight board based on airline IATA code.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter iataCode: (path)  
     - parameter authorization: (header) User ID 

     - returns: RequestBuilder<AirlineFlightBoardResponseModel> 
     */
    public class func v1SchedulesReadWithRequestBuilder(iataCode iataCode: String, authorization: String) -> RequestBuilder<AirlineFlightBoardResponseModel> {
        var path = "/v1/schedules/{iataCode}/"
        path = path.stringByReplacingOccurrencesOfString("{iata_code}", withString: "\(iataCode)", options: .LiteralSearch, range: nil)
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
        let nillableHeaders: [String: AnyObject?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
 
        let requestBuilder: RequestBuilder<AirlineFlightBoardResponseModel>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter search: (query) Search term 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1SearchList(search search: String, completion: ((data: CombinedSearchResult?, error: ErrorType?) -> Void)) {
        v1SearchListWithRequestBuilder(search: search).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /v1/search/
     - Perform a combined search across Airport and Airline models.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter search: (query) Search term 

     - returns: RequestBuilder<CombinedSearchResult> 
     */
    public class func v1SearchListWithRequestBuilder(search search: String) -> RequestBuilder<CombinedSearchResult> {
        let path = "/v1/search/"
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "search": search
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CombinedSearchResult>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1TestList(ordering ordering: String? = nil, search: String? = nil, page: Int32? = nil, limit: Int32? = nil, completion: ((data: RealtimeFlights?, error: ErrorType?) -> Void)) {
        v1TestListWithRequestBuilder(ordering: ordering, search: search, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /v1/test/
     - Retrieve a list of real-time flights.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)

     - returns: RequestBuilder<RealtimeFlights> 
     */
    public class func v1TestListWithRequestBuilder(ordering ordering: String? = nil, search: String? = nil, page: Int32? = nil, limit: Int32? = nil) -> RequestBuilder<RealtimeFlights> {
        let path = "/v1/test/"
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "ordering": ordering,
            "search": search,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RealtimeFlights>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1TestRead(id id: String, completion: ((error: ErrorType?) -> Void)) {
        v1TestReadWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - GET /v1/test/{id}/
     - 
     - BASIC:
       - type: basic
       - name: Basic
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    public class func v1TestReadWithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/v1/test/{id}/"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter search: (query) Search term to filter timezones by timezone. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1TimezonesList(search search: String? = nil, page: Int32? = nil, limit: Int32? = nil, completion: ((data: [Timezone]?, error: ErrorType?) -> Void)) {
        v1TimezonesListWithRequestBuilder(search: search, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /v1/timezones/
     - Retrieve a list of timezones filtered by search criteria.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={}}]
     
     - parameter search: (query) Search term to filter timezones by timezone. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)

     - returns: RequestBuilder<[Timezone]> 
     */
    public class func v1TimezonesListWithRequestBuilder(search search: String? = nil, page: Int32? = nil, limit: Int32? = nil) -> RequestBuilder<[Timezone]> {
        let path = "/v1/timezones/"
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "search": search,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Timezone]>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter data: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1TrackCreate(data data: AlertRequestModel, completion: ((data: Alert?, error: ErrorType?) -> Void)) {
        v1TrackCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /v1/track/
     - Track a flight
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter data: (body)  

     - returns: RequestBuilder<Alert> 
     */
    public class func v1TrackCreateWithRequestBuilder(data data: AlertRequestModel) -> RequestBuilder<Alert> {
        let path = "/v1/track/"
        let URLString = FlightSwaggerClientAPI.basePath + path
        let parameters = data.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Alert>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path) A unique integer value identifying this alert. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1TrackDelete(id id: Int32, completion: ((error: ErrorType?) -> Void)) {
        v1TrackDeleteWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - DELETE /v1/track/{id}/
     - Soft-delete an alert by marking it as inactive.
     - BASIC:
       - type: basic
       - name: Basic
     
     - parameter id: (path) A unique integer value identifying this alert. 

     - returns: RequestBuilder<Void> 
     */
    public class func v1TrackDeleteWithRequestBuilder(id id: Int32) -> RequestBuilder<Void> {
        var path = "/v1/track/{id}/"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter user: (query) User ID to filter tracked flights by. 
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1TrackList(user user: String, ordering: String? = nil, search: String? = nil, page: Int32? = nil, limit: Int32? = nil, completion: ((data: Alert?, error: ErrorType?) -> Void)) {
        v1TrackListWithRequestBuilder(user: user, ordering: ordering, search: search, page: page, limit: limit).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /v1/track/
     - Retrieve tracked flights for a user.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter user: (query) User ID to filter tracked flights by. 
     - parameter ordering: (query) Which field to use when ordering the results. (optional)
     - parameter search: (query) A search term. (optional)
     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter limit: (query) Number of results to return per page. (optional)

     - returns: RequestBuilder<Alert> 
     */
    public class func v1TrackListWithRequestBuilder(user user: String, ordering: String? = nil, search: String? = nil, page: Int32? = nil, limit: Int32? = nil) -> RequestBuilder<Alert> {
        let path = "/v1/track/"
        let URLString = FlightSwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "ordering": ordering,
            "search": search,
            "page": page?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "user": user
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Alert>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter data: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1UserCreate(data data: User, completion: ((data: User?, error: ErrorType?) -> Void)) {
        v1UserCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /v1/user/
     - Create a new user or return existing user if user_id already exists.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter data: (body)  

     - returns: RequestBuilder<User> 
     */
    public class func v1UserCreateWithRequestBuilder(data data: User) -> RequestBuilder<User> {
        let path = "/v1/user/"
        let URLString = FlightSwaggerClientAPI.basePath + path
        let parameters = data.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<User>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter userId: (path)  
     - parameter data: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1UserPartialUpdate(userId userId: String, data: User, completion: ((data: User?, error: ErrorType?) -> Void)) {
        v1UserPartialUpdateWithRequestBuilder(userId: userId, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PATCH /v1/user/{userId}/
     - Partially update an existing user.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter userId: (path)  
     - parameter data: (body)  

     - returns: RequestBuilder<User> 
     */
    public class func v1UserPartialUpdateWithRequestBuilder(userId userId: String, data: User) -> RequestBuilder<User> {
        var path = "/v1/user/{userId}/"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = FlightSwaggerClientAPI.basePath + path
        let parameters = data.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<User>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter userId: (path)  
     - parameter data: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1UserUpdate(userId userId: String, data: User, completion: ((data: User?, error: ErrorType?) -> Void)) {
        v1UserUpdateWithRequestBuilder(userId: userId, data: data).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PUT /v1/user/{userId}/
     - Update an existing user.
     - BASIC:
       - type: basic
       - name: Basic
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter userId: (path)  
     - parameter data: (body)  

     - returns: RequestBuilder<User> 
     */
    public class func v1UserUpdateWithRequestBuilder(userId userId: String, data: User) -> RequestBuilder<User> {
        var path = "/v1/user/{userId}/"
        path = path.stringByReplacingOccurrencesOfString("{user_id}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = FlightSwaggerClientAPI.basePath + path
        let parameters = data.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<User>.Type = FlightSwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
