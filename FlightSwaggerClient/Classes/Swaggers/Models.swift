// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [AircraftType]
            Decoders.addDecoder(clazz: [AircraftType].self) { (source: AnyObject) -> [AircraftType] in
                return Decoders.decode(clazz: [AircraftType].self, source: source)
            }
            // Decoder for AircraftType
            Decoders.addDecoder(clazz: AircraftType.self) { (source: AnyObject) -> AircraftType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AircraftType()
                instance.hex = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hex"])
                instance.regNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reg_number"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.built = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["built"])
                instance.engine = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["engine"])
                instance.engineCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["engine_count"])
                instance.model = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["model"])
                instance.manufacturer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["manufacturer"])
                instance.msn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msn"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                instance.line = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["line"])
                instance.imageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image_url"])
                return instance
            }


            // Decoder for [AirlineFlightBoardFlightType]
            Decoders.addDecoder(clazz: [AirlineFlightBoardFlightType].self) { (source: AnyObject) -> [AirlineFlightBoardFlightType] in
                return Decoders.decode(clazz: [AirlineFlightBoardFlightType].self, source: source)
            }
            // Decoder for AirlineFlightBoardFlightType
            Decoders.addDecoder(clazz: AirlineFlightBoardFlightType.self) { (source: AnyObject) -> AirlineFlightBoardFlightType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AirlineFlightBoardFlightType()
                instance.flightIata = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flight_iata"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [AirlineFlightBoardResponseModel]
            Decoders.addDecoder(clazz: [AirlineFlightBoardResponseModel].self) { (source: AnyObject) -> [AirlineFlightBoardResponseModel] in
                return Decoders.decode(clazz: [AirlineFlightBoardResponseModel].self, source: source)
            }
            // Decoder for AirlineFlightBoardResponseModel
            Decoders.addDecoder(clazz: AirlineFlightBoardResponseModel.self) { (source: AnyObject) -> AirlineFlightBoardResponseModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AirlineFlightBoardResponseModel()
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [AirlineFlightBoardResultModel]
            Decoders.addDecoder(clazz: [AirlineFlightBoardResultModel].self) { (source: AnyObject) -> [AirlineFlightBoardResultModel] in
                return Decoders.decode(clazz: [AirlineFlightBoardResultModel].self, source: source)
            }
            // Decoder for AirlineFlightBoardResultModel
            Decoders.addDecoder(clazz: AirlineFlightBoardResultModel.self) { (source: AnyObject) -> AirlineFlightBoardResultModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AirlineFlightBoardResultModel()
                instance.departure = Decoders.decodeOptional(clazz: ScheduleListAirportType.self, source: sourceDictionary["departure"])
                instance.arrival = Decoders.decodeOptional(clazz: ScheduleListAirportType.self, source: sourceDictionary["arrival"])
                instance.airline = Decoders.decodeOptional(clazz: ScheduleListAirlineType.self, source: sourceDictionary["airline"])
                instance.flight = Decoders.decodeOptional(clazz: AirlineFlightBoardFlightType.self, source: sourceDictionary["flight"])
                return instance
            }


            // Decoder for [AirlineType]
            Decoders.addDecoder(clazz: [AirlineType].self) { (source: AnyObject) -> [AirlineType] in
                return Decoders.decode(clazz: [AirlineType].self, source: source)
            }
            // Decoder for AirlineType
            Decoders.addDecoder(clazz: AirlineType.self) { (source: AnyObject) -> AirlineType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AirlineType()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.iataCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iata_code"])
                instance.icaoCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icao_code"])
                instance.isInternational = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_international"])
                instance.website = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["website"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.callsign = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callsign"])
                instance.isPassenger = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_passenger"])
                instance.isCargo = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_cargo"])
                instance.totalAircrafts = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_aircrafts"])
                instance.averageFleetAge = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["average_fleet_age"])
                instance.accidentsLast5y = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["accidents_last_5y"])
                instance.crashesLast5y = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["crashes_last_5y"])
                return instance
            }


            // Decoder for [Airport]
            Decoders.addDecoder(clazz: [Airport].self) { (source: AnyObject) -> [Airport] in
                return Decoders.decode(clazz: [Airport].self, source: source)
            }
            // Decoder for Airport
            Decoders.addDecoder(clazz: Airport.self) { (source: AnyObject) -> Airport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Airport()
                instance.iataCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iata_code"])
                instance.icaoCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icao_code"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"])
                instance.isInternational = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_international"])
                instance.isMajor = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_major"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"])
                instance.timezone = Decoders.decodeOptional(clazz: Timezone.self, source: sourceDictionary["timezone"])
                return instance
            }


            // Decoder for [Alert]
            Decoders.addDecoder(clazz: [Alert].self) { (source: AnyObject) -> [Alert] in
                return Decoders.decode(clazz: [Alert].self, source: source)
            }
            // Decoder for Alert
            Decoders.addDecoder(clazz: Alert.self) { (source: AnyObject) -> Alert in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Alert()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.flightIata = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flight_iata"])
                instance.date = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date"])
                instance.departureAirport = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departure_airport"])
                instance.arrivalAirport = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arrival_airport"])
                instance.isActive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_active"])
                return instance
            }


            // Decoder for [AlertRequestModel]
            Decoders.addDecoder(clazz: [AlertRequestModel].self) { (source: AnyObject) -> [AlertRequestModel] in
                return Decoders.decode(clazz: [AlertRequestModel].self, source: source)
            }
            // Decoder for AlertRequestModel
            Decoders.addDecoder(clazz: AlertRequestModel.self) { (source: AnyObject) -> AlertRequestModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AlertRequestModel()
                instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user"])
                instance.flightIata = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flight_iata"])
                instance.date = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date"])
                instance.departureAirport = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departure_airport"])
                instance.arrivalAirport = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arrival_airport"])
                return instance
            }


            // Decoder for [CombinedSearchResult]
            Decoders.addDecoder(clazz: [CombinedSearchResult].self) { (source: AnyObject) -> [CombinedSearchResult] in
                return Decoders.decode(clazz: [CombinedSearchResult].self, source: source)
            }
            // Decoder for CombinedSearchResult
            Decoders.addDecoder(clazz: CombinedSearchResult.self) { (source: AnyObject) -> CombinedSearchResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CombinedSearchResult()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.iataCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iata_code"])
                instance.icaoCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icao_code"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.isInternational = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_international"])
                instance.isMajor = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_major"])
                instance.callsign = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callsign"])
                instance.isPassenger = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_passenger"])
                instance.isCargo = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_cargo"])
                return instance
            }


            // Decoder for [FlightDatetimeDataType]
            Decoders.addDecoder(clazz: [FlightDatetimeDataType].self) { (source: AnyObject) -> [FlightDatetimeDataType] in
                return Decoders.decode(clazz: [FlightDatetimeDataType].self, source: source)
            }
            // Decoder for FlightDatetimeDataType
            Decoders.addDecoder(clazz: FlightDatetimeDataType.self) { (source: AnyObject) -> FlightDatetimeDataType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightDatetimeDataType()
                instance.utc = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["utc"])
                instance.local = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["local"])
                return instance
            }


            // Decoder for [FlightInfoAirport]
            Decoders.addDecoder(clazz: [FlightInfoAirport].self) { (source: AnyObject) -> [FlightInfoAirport] in
                return Decoders.decode(clazz: [FlightInfoAirport].self, source: source)
            }
            // Decoder for FlightInfoAirport
            Decoders.addDecoder(clazz: FlightInfoAirport.self) { (source: AnyObject) -> FlightInfoAirport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightInfoAirport()
                instance.airport = Decoders.decodeOptional(clazz: Airport.self, source: sourceDictionary["airport"])
                instance.scheduled = Decoders.decodeOptional(clazz: FlightDatetimeDataType.self, source: sourceDictionary["scheduled"])
                instance.estimated = Decoders.decodeOptional(clazz: FlightDatetimeDataType.self, source: sourceDictionary["estimated"])
                instance.taxiing = Decoders.decodeOptional(clazz: FlightDatetimeDataType.self, source: sourceDictionary["taxiing"])
                instance.actual = Decoders.decodeOptional(clazz: FlightDatetimeDataType.self, source: sourceDictionary["actual"])
                instance.terminal = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["terminal"])
                instance.gate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gate"])
                instance.baggageBelt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["baggage_belt"])
                return instance
            }


            // Decoder for [FlightInfoResponseModel]
            Decoders.addDecoder(clazz: [FlightInfoResponseModel].self) { (source: AnyObject) -> [FlightInfoResponseModel] in
                return Decoders.decode(clazz: [FlightInfoResponseModel].self, source: source)
            }
            // Decoder for FlightInfoResponseModel
            Decoders.addDecoder(clazz: FlightInfoResponseModel.self) { (source: AnyObject) -> FlightInfoResponseModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightInfoResponseModel()
                instance.greatCircleDistance = Decoders.decodeOptional(clazz: GreatCircleDistance.self, source: sourceDictionary["great_circle_distance"])
                instance.departure = Decoders.decodeOptional(clazz: FlightInfoAirport.self, source: sourceDictionary["departure"])
                instance.arrival = Decoders.decodeOptional(clazz: FlightInfoAirport.self, source: sourceDictionary["arrival"])
                instance.lastUpdated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["last_updated"])
                instance.flightIata = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flight_iata"])
                instance.callSign = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["call_sign"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.codeshareStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["codeshare_status"])
                instance.isCargo = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_cargo"])
                instance.aircraft = Decoders.decodeOptional(clazz: AircraftType.self, source: sourceDictionary["aircraft"])
                instance.airline = Decoders.decodeOptional(clazz: AirlineType.self, source: sourceDictionary["airline"])
                return instance
            }


            // Decoder for [GreatCircleDistance]
            Decoders.addDecoder(clazz: [GreatCircleDistance].self) { (source: AnyObject) -> [GreatCircleDistance] in
                return Decoders.decode(clazz: [GreatCircleDistance].self, source: source)
            }
            // Decoder for GreatCircleDistance
            Decoders.addDecoder(clazz: GreatCircleDistance.self) { (source: AnyObject) -> GreatCircleDistance in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GreatCircleDistance()
                instance.meter = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["meter"])
                instance.km = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["km"])
                instance.mile = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["mile"])
                instance.nm = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["nm"])
                instance.feet = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["feet"])
                return instance
            }


            // Decoder for [InlineResponse200]
            Decoders.addDecoder(clazz: [InlineResponse200].self) { (source: AnyObject) -> [InlineResponse200] in
                return Decoders.decode(clazz: [InlineResponse200].self, source: source)
            }
            // Decoder for InlineResponse200
            Decoders.addDecoder(clazz: InlineResponse200.self) { (source: AnyObject) -> InlineResponse200 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse200()
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                instance.next = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next"])
                instance.previous = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previous"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [InlineResponse2001]
            Decoders.addDecoder(clazz: [InlineResponse2001].self) { (source: AnyObject) -> [InlineResponse2001] in
                return Decoders.decode(clazz: [InlineResponse2001].self, source: source)
            }
            // Decoder for InlineResponse2001
            Decoders.addDecoder(clazz: InlineResponse2001.self) { (source: AnyObject) -> InlineResponse2001 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2001()
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                instance.next = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next"])
                instance.previous = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previous"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [RealtimeFlights]
            Decoders.addDecoder(clazz: [RealtimeFlights].self) { (source: AnyObject) -> [RealtimeFlights] in
                return Decoders.decode(clazz: [RealtimeFlights].self, source: source)
            }
            // Decoder for RealtimeFlights
            Decoders.addDecoder(clazz: RealtimeFlights.self) { (source: AnyObject) -> RealtimeFlights in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RealtimeFlights()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"])
                instance.positionSource = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["position_source"])
                instance.callsign = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callsign"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.lastContact = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["last_contact"])
                instance.barometricAltitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["barometric_altitude"])
                instance.onGround = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["on_ground"])
                instance.speed = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["speed"])
                instance.direction = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["direction"])
                instance.vSpeed = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["v_speed"])
                instance.altitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["altitude"])
                instance.squawk = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["squawk"])
                instance.specialPurpose = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["special_purpose"])
                return instance
            }


            // Decoder for [ScheduleListAirlineType]
            Decoders.addDecoder(clazz: [ScheduleListAirlineType].self) { (source: AnyObject) -> [ScheduleListAirlineType] in
                return Decoders.decode(clazz: [ScheduleListAirlineType].self, source: source)
            }
            // Decoder for ScheduleListAirlineType
            Decoders.addDecoder(clazz: ScheduleListAirlineType.self) { (source: AnyObject) -> ScheduleListAirlineType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ScheduleListAirlineType()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.iataCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iata_code"])
                instance.icaoCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icao_code"])
                return instance
            }


            // Decoder for [ScheduleListAirportType]
            Decoders.addDecoder(clazz: [ScheduleListAirportType].self) { (source: AnyObject) -> [ScheduleListAirportType] in
                return Decoders.decode(clazz: [ScheduleListAirportType].self, source: source)
            }
            // Decoder for ScheduleListAirportType
            Decoders.addDecoder(clazz: ScheduleListAirportType.self) { (source: AnyObject) -> ScheduleListAirportType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ScheduleListAirportType()
                instance.iataCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iata_code"])
                instance.icaoCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icao_code"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.timezone = Decoders.decodeOptional(clazz: Timezone.self, source: sourceDictionary["timezone"])
                return instance
            }


            // Decoder for [ScheduleResponseModel]
            Decoders.addDecoder(clazz: [ScheduleResponseModel].self) { (source: AnyObject) -> [ScheduleResponseModel] in
                return Decoders.decode(clazz: [ScheduleResponseModel].self, source: source)
            }
            // Decoder for ScheduleResponseModel
            Decoders.addDecoder(clazz: ScheduleResponseModel.self) { (source: AnyObject) -> ScheduleResponseModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ScheduleResponseModel()
                instance.departureAirport = Decoders.decodeOptional(clazz: ScheduleListAirportType.self, source: sourceDictionary["departure_airport"])
                instance.arrivalAirport = Decoders.decodeOptional(clazz: ScheduleListAirportType.self, source: sourceDictionary["arrival_airport"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ScheduleResultModel]
            Decoders.addDecoder(clazz: [ScheduleResultModel].self) { (source: AnyObject) -> [ScheduleResultModel] in
                return Decoders.decode(clazz: [ScheduleResultModel].self, source: source)
            }
            // Decoder for ScheduleResultModel
            Decoders.addDecoder(clazz: ScheduleResultModel.self) { (source: AnyObject) -> ScheduleResultModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ScheduleResultModel()
                instance.airline = Decoders.decodeOptional(clazz: ScheduleListAirlineType.self, source: sourceDictionary["airline"])
                instance.flightNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flight_number"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.operatedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operated_by"])
                instance.departureTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departure_time"])
                instance.arrivalTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arrival_time"])
                instance.airport = Decoders.decodeOptional(clazz: ScheduleListAirportType.self, source: sourceDictionary["airport"])
                return instance
            }


            // Decoder for [Timezone]
            Decoders.addDecoder(clazz: [Timezone].self) { (source: AnyObject) -> [Timezone] in
                return Decoders.decode(clazz: [Timezone].self, source: source)
            }
            // Decoder for Timezone
            Decoders.addDecoder(clazz: Timezone.self) { (source: AnyObject) -> Timezone in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Timezone()
                instance.timezone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"])
                instance.gmt = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["gmt"])
                instance.dst = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["dst"])
                return instance
            }


            // Decoder for [User]
            Decoders.addDecoder(clazz: [User].self) { (source: AnyObject) -> [User] in
                return Decoders.decode(clazz: [User].self, source: source)
            }
            // Decoder for User
            Decoders.addDecoder(clazz: User.self) { (source: AnyObject) -> User in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = User()
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user_id"])
                instance.pushToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["push_token"])
                instance.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transaction_id"])
                instance.os = User.Os(rawValue: (sourceDictionary["os"] as? String) ?? "") 
                instance.alert = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["alert"])
                instance.remainder = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["remainder"])
                instance.isPremium = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_premium"])
                instance.trackCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["track_count"])
                instance.detailsCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["details_count"])
                return instance
            }
        }
    }
}
