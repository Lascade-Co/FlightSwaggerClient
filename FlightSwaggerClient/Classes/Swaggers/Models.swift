// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [FlightAirlineFilterData]
            Decoders.addDecoder(clazz: [FlightAirlineFilterData].self) { (source: AnyObject) -> [FlightAirlineFilterData] in
                return Decoders.decode(clazz: [FlightAirlineFilterData].self, source: source)
            }
            // Decoder for FlightAirlineFilterData
            Decoders.addDecoder(clazz: FlightAirlineFilterData.self) { (source: AnyObject) -> FlightAirlineFilterData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightAirlineFilterData()
                instance.airlineName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["airlineName"])
                instance.airlineIata = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["airlineIata"])
                instance.airlineLogo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["airlineLogo"])
                return instance
            }


            // Decoder for [FlightAirlineModel]
            Decoders.addDecoder(clazz: [FlightAirlineModel].self) { (source: AnyObject) -> [FlightAirlineModel] in
                return Decoders.decode(clazz: [FlightAirlineModel].self, source: source)
            }
            // Decoder for FlightAirlineModel
            Decoders.addDecoder(clazz: FlightAirlineModel.self) { (source: AnyObject) -> FlightAirlineModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightAirlineModel()
                instance.iata = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iata"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.logo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logo"])
                return instance
            }


            // Decoder for [FlightAirportModel]
            Decoders.addDecoder(clazz: [FlightAirportModel].self) { (source: AnyObject) -> [FlightAirportModel] in
                return Decoders.decode(clazz: [FlightAirportModel].self, source: source)
            }
            // Decoder for FlightAirportModel
            Decoders.addDecoder(clazz: FlightAirportModel.self) { (source: AnyObject) -> FlightAirportModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightAirportModel()
                instance.iata = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iata"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                return instance
            }


            // Decoder for [FlightAirportResponseModel]
            Decoders.addDecoder(clazz: [FlightAirportResponseModel].self) { (source: AnyObject) -> [FlightAirportResponseModel] in
                return Decoders.decode(clazz: [FlightAirportResponseModel].self, source: source)
            }
            // Decoder for FlightAirportResponseModel
            Decoders.addDecoder(clazz: FlightAirportResponseModel.self) { (source: AnyObject) -> FlightAirportResponseModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightAirportResponseModel()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.shortName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_name"])
                instance.popularity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["popularity"])
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"])
                return instance
            }


            // Decoder for [FlightArrivalDeparture]
            Decoders.addDecoder(clazz: [FlightArrivalDeparture].self) { (source: AnyObject) -> [FlightArrivalDeparture] in
                return Decoders.decode(clazz: [FlightArrivalDeparture].self, source: source)
            }
            // Decoder for FlightArrivalDeparture
            Decoders.addDecoder(clazz: FlightArrivalDeparture.self) { (source: AnyObject) -> FlightArrivalDeparture in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightArrivalDeparture()
                instance.arrival = Decoders.decodeOptional(clazz: FlightTimeRange.self, source: sourceDictionary["arrival"])
                instance.departure = Decoders.decodeOptional(clazz: FlightTimeRange.self, source: sourceDictionary["departure"])
                return instance
            }


            // Decoder for [FlightAutocompleteItem]
            Decoders.addDecoder(clazz: [FlightAutocompleteItem].self) { (source: AnyObject) -> [FlightAutocompleteItem] in
                return Decoders.decode(clazz: [FlightAutocompleteItem].self, source: source)
            }
            // Decoder for FlightAutocompleteItem
            Decoders.addDecoder(clazz: FlightAutocompleteItem.self) { (source: AnyObject) -> FlightAutocompleteItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightAutocompleteItem()
                instance.iataCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iataCode"])
                instance.airportName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["airportName"])
                instance.type = FlightAutocompleteItem.FlightType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.cityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityName"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.countryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryName"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"])
                instance.imageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageUrl"])
                instance.coordinates = Decoders.decodeOptional(clazz: FlightCoordinate.self, source: sourceDictionary["coordinates"])
                return instance
            }


            // Decoder for [FlightAutocompleteResponseBodyModel]
            Decoders.addDecoder(clazz: [FlightAutocompleteResponseBodyModel].self) { (source: AnyObject) -> [FlightAutocompleteResponseBodyModel] in
                return Decoders.decode(clazz: [FlightAutocompleteResponseBodyModel].self, source: source)
            }
            // Decoder for FlightAutocompleteResponseBodyModel
            Decoders.addDecoder(clazz: FlightAutocompleteResponseBodyModel.self) { (source: AnyObject) -> FlightAutocompleteResponseBodyModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightAutocompleteResponseBodyModel()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.language = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["language"])
                return instance
            }


            // Decoder for [FlightCityResponseModel]
            Decoders.addDecoder(clazz: [FlightCityResponseModel].self) { (source: AnyObject) -> [FlightCityResponseModel] in
                return Decoders.decode(clazz: [FlightCityResponseModel].self, source: source)
            }
            // Decoder for FlightCityResponseModel
            Decoders.addDecoder(clazz: FlightCityResponseModel.self) { (source: AnyObject) -> FlightCityResponseModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightCityResponseModel()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"])
                return instance
            }


            // Decoder for [FlightCoordinate]
            Decoders.addDecoder(clazz: [FlightCoordinate].self) { (source: AnyObject) -> [FlightCoordinate] in
                return Decoders.decode(clazz: [FlightCoordinate].self, source: source)
            }
            // Decoder for FlightCoordinate
            Decoders.addDecoder(clazz: FlightCoordinate.self) { (source: AnyObject) -> FlightCoordinate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightCoordinate()
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"])
                return instance
            }


            // Decoder for [FlightCountry]
            Decoders.addDecoder(clazz: [FlightCountry].self) { (source: AnyObject) -> [FlightCountry] in
                return Decoders.decode(clazz: [FlightCountry].self, source: source)
            }
            // Decoder for FlightCountry
            Decoders.addDecoder(clazz: FlightCountry.self) { (source: AnyObject) -> FlightCountry in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightCountry()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.currency = Decoders.decodeOptional(clazz: FlightCurrency.self, source: sourceDictionary["currency"])
                instance.flag = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flag"])
                return instance
            }


            // Decoder for [FlightCountryApp]
            Decoders.addDecoder(clazz: [FlightCountryApp].self) { (source: AnyObject) -> [FlightCountryApp] in
                return Decoders.decode(clazz: [FlightCountryApp].self, source: source)
            }
            // Decoder for FlightCountryApp
            Decoders.addDecoder(clazz: FlightCountryApp.self) { (source: AnyObject) -> FlightCountryApp in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightCountryApp()
                instance.countryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_name"])
                instance.appName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["app_name"])
                instance.deeplinkProviders = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deeplink_providers"])
                instance.isPopupAdsEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_popup_ads_enabled"])
                instance.apiResponseIndex = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["api_response_index"])
                instance.focusTab = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["focus_tab"])
                return instance
            }


            // Decoder for [FlightCountryResponseModel]
            Decoders.addDecoder(clazz: [FlightCountryResponseModel].self) { (source: AnyObject) -> [FlightCountryResponseModel] in
                return Decoders.decode(clazz: [FlightCountryResponseModel].self, source: source)
            }
            // Decoder for FlightCountryResponseModel
            Decoders.addDecoder(clazz: FlightCountryResponseModel.self) { (source: AnyObject) -> FlightCountryResponseModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightCountryResponseModel()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.shortName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_name"])
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"])
                instance.destinations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["destinations"])
                return instance
            }


            // Decoder for [FlightCurrency]
            Decoders.addDecoder(clazz: [FlightCurrency].self) { (source: AnyObject) -> [FlightCurrency] in
                return Decoders.decode(clazz: [FlightCurrency].self, source: source)
            }
            // Decoder for FlightCurrency
            Decoders.addDecoder(clazz: FlightCurrency.self) { (source: AnyObject) -> FlightCurrency in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightCurrency()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.symbol = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["symbol"])
                instance.thousandsSeparator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thousands_separator"])
                instance.decimalSeparator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["decimal_separator"])
                instance.symbolOnLeft = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["symbol_on_left"])
                instance.spaceBetweenAmountAndSymbol = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["space_between_amount_and_symbol"])
                instance.decimalDigits = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["decimal_digits"])
                return instance
            }


            // Decoder for [FlightCurrencyModelType]
            Decoders.addDecoder(clazz: [FlightCurrencyModelType].self) { (source: AnyObject) -> [FlightCurrencyModelType] in
                return Decoders.decode(clazz: [FlightCurrencyModelType].self, source: source)
            }
            // Decoder for FlightCurrencyModelType
            Decoders.addDecoder(clazz: FlightCurrencyModelType.self) { (source: AnyObject) -> FlightCurrencyModelType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightCurrencyModelType()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.symbol = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["symbol"])
                instance.thousandsSeparator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thousands_separator"])
                instance.decimalSeparator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["decimal_separator"])
                instance.symbolOnLeft = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["symbol_on_left"])
                instance.spaceBetweenAmountAndSymbol = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["space_between_amount_and_symbol"])
                instance.decimalDigits = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["decimal_digits"])
                return instance
            }


            // Decoder for [FlightDestinationResponseModel]
            Decoders.addDecoder(clazz: [FlightDestinationResponseModel].self) { (source: AnyObject) -> [FlightDestinationResponseModel] in
                return Decoders.decode(clazz: [FlightDestinationResponseModel].self, source: source)
            }
            // Decoder for FlightDestinationResponseModel
            Decoders.addDecoder(clazz: FlightDestinationResponseModel.self) { (source: AnyObject) -> FlightDestinationResponseModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightDestinationResponseModel()
                instance.airport = Decoders.decodeOptional(clazz: FlightAirportResponseModel.self, source: sourceDictionary["airport"])
                instance.city = Decoders.decodeOptional(clazz: FlightCityResponseModel.self, source: sourceDictionary["city"])
                instance.departureDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departure_date"])
                instance.returnDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["return_date"])
                instance.flight = Decoders.decodeOptional(clazz: FlightFlightResponseModel.self, source: sourceDictionary["flight"])
                instance.languages = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["languages"])
                instance.region = Decoders.decodeOptional(clazz: FlightRegionResponseModel.self, source: sourceDictionary["region"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"])
                instance.days = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["days"])
                return instance
            }


            // Decoder for [FlightExploreResponseModel]
            Decoders.addDecoder(clazz: [FlightExploreResponseModel].self) { (source: AnyObject) -> [FlightExploreResponseModel] in
                return Decoders.decode(clazz: [FlightExploreResponseModel].self, source: source)
            }
            // Decoder for FlightExploreResponseModel
            Decoders.addDecoder(clazz: FlightExploreResponseModel.self) { (source: AnyObject) -> FlightExploreResponseModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightExploreResponseModel()
                instance.origin = Decoders.decodeOptional(clazz: FlightOriginResponseModel.self, source: sourceDictionary["origin"])
                instance.countries = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["countries"])
                return instance
            }


            // Decoder for [FlightFlight]
            Decoders.addDecoder(clazz: [FlightFlight].self) { (source: AnyObject) -> [FlightFlight] in
                return Decoders.decode(clazz: [FlightFlight].self, source: source)
            }
            // Decoder for FlightFlight
            Decoders.addDecoder(clazz: FlightFlight.self) { (source: AnyObject) -> FlightFlight in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightFlight()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.totalDuration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_duration"])
                instance.minPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["min_price"])
                instance.maxPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["max_price"])
                instance.legs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["legs"])
                instance.providers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["providers"])
                instance.isBest = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_best"])
                instance.isCheapest = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_cheapest"])
                instance.isFastest = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_fastest"])
                return instance
            }


            // Decoder for [FlightFlightDetailModel]
            Decoders.addDecoder(clazz: [FlightFlightDetailModel].self) { (source: AnyObject) -> [FlightFlightDetailModel] in
                return Decoders.decode(clazz: [FlightFlightDetailModel].self, source: source)
            }
            // Decoder for FlightFlightDetailModel
            Decoders.addDecoder(clazz: FlightFlightDetailModel.self) { (source: AnyObject) -> FlightFlightDetailModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightFlightDetailModel()
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"])
                instance.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"])
                return instance
            }


            // Decoder for [FlightFlightLegModel]
            Decoders.addDecoder(clazz: [FlightFlightLegModel].self) { (source: AnyObject) -> [FlightFlightLegModel] in
                return Decoders.decode(clazz: [FlightFlightLegModel].self, source: source)
            }
            // Decoder for FlightFlightLegModel
            Decoders.addDecoder(clazz: FlightFlightLegModel.self) { (source: AnyObject) -> FlightFlightLegModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightFlightLegModel()
                instance.origin = Decoders.decodeOptional(clazz: FlightAirportModel.self, source: sourceDictionary["origin"])
                instance.destination = Decoders.decodeOptional(clazz: FlightAirportModel.self, source: sourceDictionary["destination"])
                instance.airline = Decoders.decodeOptional(clazz: FlightAirlineModel.self, source: sourceDictionary["airline"])
                instance.departure = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["departure"])
                instance.direct = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["direct"])
                return instance
            }


            // Decoder for [FlightFlightResponseModel]
            Decoders.addDecoder(clazz: [FlightFlightResponseModel].self) { (source: AnyObject) -> [FlightFlightResponseModel] in
                return Decoders.decode(clazz: [FlightFlightResponseModel].self, source: source)
            }
            // Decoder for FlightFlightResponseModel
            Decoders.addDecoder(clazz: FlightFlightResponseModel.self) { (source: AnyObject) -> FlightFlightResponseModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightFlightResponseModel()
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"])
                instance.priceFormatted = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["price_formatted"])
                instance.airline = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["airline"])
                instance.airlineCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["airline_code"])
                instance.maxStops = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_stops"])
                instance.maxDuration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_duration"])
                instance.shareUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["share_url"])
                return instance
            }


            // Decoder for [FlightFlightSearchRequestBodyModel]
            Decoders.addDecoder(clazz: [FlightFlightSearchRequestBodyModel].self) { (source: AnyObject) -> [FlightFlightSearchRequestBodyModel] in
                return Decoders.decode(clazz: [FlightFlightSearchRequestBodyModel].self, source: source)
            }
            // Decoder for FlightFlightSearchRequestBodyModel
            Decoders.addDecoder(clazz: FlightFlightSearchRequestBodyModel.self) { (source: AnyObject) -> FlightFlightSearchRequestBodyModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightFlightSearchRequestBodyModel()
                instance.legs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["legs"])
                instance.cabinClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cabin_class"])
                instance.adults = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["adults"])
                instance.childrenAges = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["children_ages"])
                return instance
            }


            // Decoder for [FlightFlightSearchResponseModel]
            Decoders.addDecoder(clazz: [FlightFlightSearchResponseModel].self) { (source: AnyObject) -> [FlightFlightSearchResponseModel] in
                return Decoders.decode(clazz: [FlightFlightSearchResponseModel].self, source: source)
            }
            // Decoder for FlightFlightSearchResponseModel
            Decoders.addDecoder(clazz: FlightFlightSearchResponseModel.self) { (source: AnyObject) -> FlightFlightSearchResponseModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightFlightSearchResponseModel()
                instance.searchId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["search_id"])
                instance.language = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["language"])
                instance.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"])
                instance.mode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["mode"])
                instance.currencyInfo = Decoders.decodeOptional(clazz: FlightCurrencyModelType.self, source: sourceDictionary["currency_info"])
                return instance
            }


            // Decoder for [FlightInlineResponse200]
            Decoders.addDecoder(clazz: [FlightInlineResponse200].self) { (source: AnyObject) -> [FlightInlineResponse200] in
                return Decoders.decode(clazz: [FlightInlineResponse200].self, source: source)
            }
            // Decoder for FlightInlineResponse200
            Decoders.addDecoder(clazz: FlightInlineResponse200.self) { (source: AnyObject) -> FlightInlineResponse200 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightInlineResponse200()
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                instance.next = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next"])
                instance.previous = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previous"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [FlightInlineResponse2001]
            Decoders.addDecoder(clazz: [FlightInlineResponse2001].self) { (source: AnyObject) -> [FlightInlineResponse2001] in
                return Decoders.decode(clazz: [FlightInlineResponse2001].self, source: source)
            }
            // Decoder for FlightInlineResponse2001
            Decoders.addDecoder(clazz: FlightInlineResponse2001.self) { (source: AnyObject) -> FlightInlineResponse2001 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightInlineResponse2001()
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                instance.next = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next"])
                instance.previous = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previous"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [FlightInlineResponse2002]
            Decoders.addDecoder(clazz: [FlightInlineResponse2002].self) { (source: AnyObject) -> [FlightInlineResponse2002] in
                return Decoders.decode(clazz: [FlightInlineResponse2002].self, source: source)
            }
            // Decoder for FlightInlineResponse2002
            Decoders.addDecoder(clazz: FlightInlineResponse2002.self) { (source: AnyObject) -> FlightInlineResponse2002 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightInlineResponse2002()
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                instance.next = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next"])
                instance.previous = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previous"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [FlightLeg]
            Decoders.addDecoder(clazz: [FlightLeg].self) { (source: AnyObject) -> [FlightLeg] in
                return Decoders.decode(clazz: [FlightLeg].self, source: source)
            }
            // Decoder for FlightLeg
            Decoders.addDecoder(clazz: FlightLeg.self) { (source: AnyObject) -> FlightLeg in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightLeg()
                instance.arriveTimeAirport = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["arriveTimeAirport"])
                instance.departureTimeAirport = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["departureTimeAirport"])
                instance.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"])
                instance.origin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["origin"])
                instance.originCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["originCode"])
                instance.destination = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destination"])
                instance.destinationCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destinationCode"])
                instance.stopCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["stopCount"])
                instance.segments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["segments"])
                return instance
            }


            // Decoder for [FlightLegType]
            Decoders.addDecoder(clazz: [FlightLegType].self) { (source: AnyObject) -> [FlightLegType] in
                return Decoders.decode(clazz: [FlightLegType].self, source: source)
            }
            // Decoder for FlightLegType
            Decoders.addDecoder(clazz: FlightLegType.self) { (source: AnyObject) -> FlightLegType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightLegType()
                instance.origin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["origin"])
                instance.destination = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destination"])
                instance.date = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["date"])
                return instance
            }


            // Decoder for [FlightOriginResponseModel]
            Decoders.addDecoder(clazz: [FlightOriginResponseModel].self) { (source: AnyObject) -> [FlightOriginResponseModel] in
                return Decoders.decode(clazz: [FlightOriginResponseModel].self, source: source)
            }
            // Decoder for FlightOriginResponseModel
            Decoders.addDecoder(clazz: FlightOriginResponseModel.self) { (source: AnyObject) -> FlightOriginResponseModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightOriginResponseModel()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.shortName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_name"])
                instance.cityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city_name"])
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"])
                return instance
            }


            // Decoder for [FlightPollRequestBodyModel]
            Decoders.addDecoder(clazz: [FlightPollRequestBodyModel].self) { (source: AnyObject) -> [FlightPollRequestBodyModel] in
                return Decoders.decode(clazz: [FlightPollRequestBodyModel].self, source: source)
            }
            // Decoder for FlightPollRequestBodyModel
            Decoders.addDecoder(clazz: FlightPollRequestBodyModel.self) { (source: AnyObject) -> FlightPollRequestBodyModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightPollRequestBodyModel()
                instance.durationMax = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration_max"])
                instance.stopCountMax = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["stop_count_max"])
                instance.arrivalDepartureRanges = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["arrival_departure_ranges"])
                instance.iataCodesExclude = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["iata_codes_exclude"])
                instance.iataCodesInclude = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["iata_codes_include"])
                instance.sortBy = FlightPollRequestBodyModel.FlightSortBy(rawValue: (sourceDictionary["sort_by"] as? String) ?? "") 
                instance.sortOrder = FlightPollRequestBodyModel.FlightSortOrder(rawValue: (sourceDictionary["sort_order"] as? String) ?? "") 
                instance.agencyExclude = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["agency_exclude"])
                instance.agencyInclude = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["agency_include"])
                instance.priceMin = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price_min"])
                instance.priceMax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price_max"])
                return instance
            }


            // Decoder for [FlightPollResponseBodyModel]
            Decoders.addDecoder(clazz: [FlightPollResponseBodyModel].self) { (source: AnyObject) -> [FlightPollResponseBodyModel] in
                return Decoders.decode(clazz: [FlightPollResponseBodyModel].self, source: source)
            }
            // Decoder for FlightPollResponseBodyModel
            Decoders.addDecoder(clazz: FlightPollResponseBodyModel.self) { (source: AnyObject) -> FlightPollResponseBodyModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightPollResponseBodyModel()
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                instance.next = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next"])
                instance.previous = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previous"])
                instance.cache = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cache"])
                instance.passengerCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["passenger_count"])
                instance.airlines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["airlines"])
                instance.minDuration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_duration"])
                instance.maxDuration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_duration"])
                instance.agencies = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["agencies"])
                instance.cheapestFlight = Decoders.decodeOptional(clazz: FlightFlightDetailModel.self, source: sourceDictionary["cheapest_flight"])
                instance.bestFlight = Decoders.decodeOptional(clazz: FlightFlightDetailModel.self, source: sourceDictionary["best_flight"])
                instance.fastestFlight = Decoders.decodeOptional(clazz: FlightFlightDetailModel.self, source: sourceDictionary["fastest_flight"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [FlightPriceInsightQuoteModel]
            Decoders.addDecoder(clazz: [FlightPriceInsightQuoteModel].self) { (source: AnyObject) -> [FlightPriceInsightQuoteModel] in
                return Decoders.decode(clazz: [FlightPriceInsightQuoteModel].self, source: source)
            }
            // Decoder for FlightPriceInsightQuoteModel
            Decoders.addDecoder(clazz: FlightPriceInsightQuoteModel.self) { (source: AnyObject) -> FlightPriceInsightQuoteModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightPriceInsightQuoteModel()
                instance.date = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["date"])
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"])
                instance.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"])
                instance.outbound = Decoders.decodeOptional(clazz: FlightFlightLegModel.self, source: sourceDictionary["outbound"])
                instance.inbound = Decoders.decodeOptional(clazz: FlightFlightLegModel.self, source: sourceDictionary["inbound"])
                instance.priceCategory = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["price_category"])
                return instance
            }


            // Decoder for [FlightPriceInsightRequestCustomDrf]
            Decoders.addDecoder(clazz: [FlightPriceInsightRequestCustomDrf].self) { (source: AnyObject) -> [FlightPriceInsightRequestCustomDrf] in
                return Decoders.decode(clazz: [FlightPriceInsightRequestCustomDrf].self, source: source)
            }
            // Decoder for FlightPriceInsightRequestCustomDrf
            Decoders.addDecoder(clazz: FlightPriceInsightRequestCustomDrf.self) { (source: AnyObject) -> FlightPriceInsightRequestCustomDrf in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightPriceInsightRequestCustomDrf()
                instance.origin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["origin"])
                instance.destination = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destination"])
                instance.departure = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departure"])
                instance.roundTrip = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["round_trip"])
                return instance
            }


            // Decoder for [FlightPriceInsightResponseModel]
            Decoders.addDecoder(clazz: [FlightPriceInsightResponseModel].self) { (source: AnyObject) -> [FlightPriceInsightResponseModel] in
                return Decoders.decode(clazz: [FlightPriceInsightResponseModel].self, source: source)
            }
            // Decoder for FlightPriceInsightResponseModel
            Decoders.addDecoder(clazz: FlightPriceInsightResponseModel.self) { (source: AnyObject) -> FlightPriceInsightResponseModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightPriceInsightResponseModel()
                instance.priceStats = Decoders.decodeOptional(clazz: FlightPriceStatsModel.self, source: sourceDictionary["price_stats"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                instance.currencyInfo = Decoders.decodeOptional(clazz: FlightCurrencyModelType.self, source: sourceDictionary["currency_info"])
                return instance
            }


            // Decoder for [FlightPriceStatsModel]
            Decoders.addDecoder(clazz: [FlightPriceStatsModel].self) { (source: AnyObject) -> [FlightPriceStatsModel] in
                return Decoders.decode(clazz: [FlightPriceStatsModel].self, source: source)
            }
            // Decoder for FlightPriceStatsModel
            Decoders.addDecoder(clazz: FlightPriceStatsModel.self) { (source: AnyObject) -> FlightPriceStatsModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightPriceStatsModel()
                instance.mean = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["mean"])
                instance.stdDev = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["std_dev"])
                instance.lowerThreshold = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lower_threshold"])
                instance.upperThreshold = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["upper_threshold"])
                return instance
            }


            // Decoder for [FlightProviderFilterData]
            Decoders.addDecoder(clazz: [FlightProviderFilterData].self) { (source: AnyObject) -> [FlightProviderFilterData] in
                return Decoders.decode(clazz: [FlightProviderFilterData].self, source: source)
            }
            // Decoder for FlightProviderFilterData
            Decoders.addDecoder(clazz: FlightProviderFilterData.self) { (source: AnyObject) -> FlightProviderFilterData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightProviderFilterData()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"])
                return instance
            }


            // Decoder for [FlightProviderType]
            Decoders.addDecoder(clazz: [FlightProviderType].self) { (source: AnyObject) -> [FlightProviderType] in
                return Decoders.decode(clazz: [FlightProviderType].self, source: source)
            }
            // Decoder for FlightProviderType
            Decoders.addDecoder(clazz: FlightProviderType.self) { (source: AnyObject) -> FlightProviderType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightProviderType()
                instance.isSplit = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isSplit"])
                instance.transferType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transferType"])
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"])
                instance.splitProviders = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["splitProviders"])
                return instance
            }


            // Decoder for [FlightRegionResponseModel]
            Decoders.addDecoder(clazz: [FlightRegionResponseModel].self) { (source: AnyObject) -> [FlightRegionResponseModel] in
                return Decoders.decode(clazz: [FlightRegionResponseModel].self, source: source)
            }
            // Decoder for FlightRegionResponseModel
            Decoders.addDecoder(clazz: FlightRegionResponseModel.self) { (source: AnyObject) -> FlightRegionResponseModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightRegionResponseModel()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.shortName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_name"])
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"])
                return instance
            }


            // Decoder for [FlightSegment]
            Decoders.addDecoder(clazz: [FlightSegment].self) { (source: AnyObject) -> [FlightSegment] in
                return Decoders.decode(clazz: [FlightSegment].self, source: source)
            }
            // Decoder for FlightSegment
            Decoders.addDecoder(clazz: FlightSegment.self) { (source: AnyObject) -> FlightSegment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightSegment()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.arriveTimeAirport = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["arriveTimeAirport"])
                instance.departureTimeAirport = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["departureTimeAirport"])
                instance.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"])
                instance.flightNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flightNumber"])
                instance.airlineName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["airlineName"])
                instance.airlineIata = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["airlineIata"])
                instance.airlineLogo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["airlineLogo"])
                instance.originCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["originCode"])
                instance.origin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["origin"])
                instance.destinationCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destinationCode"])
                instance.destination = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destination"])
                instance.arrivalDayDifference = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["arrival_day_difference"])
                instance.wifi = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wifi"])
                instance.cabinClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cabinClass"])
                instance.aircraft = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["aircraft"])
                return instance
            }


            // Decoder for [FlightSplitProvider]
            Decoders.addDecoder(clazz: [FlightSplitProvider].self) { (source: AnyObject) -> [FlightSplitProvider] in
                return Decoders.decode(clazz: [FlightSplitProvider].self, source: source)
            }
            // Decoder for FlightSplitProvider
            Decoders.addDecoder(clazz: FlightSplitProvider.self) { (source: AnyObject) -> FlightSplitProvider in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightSplitProvider()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.imageURL = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageURL"])
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"])
                instance.deeplink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deeplink"])
                instance.rating = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rating"])
                instance.ratingCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ratingCount"])
                instance.fareFamily = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["fareFamily"])
                return instance
            }


            // Decoder for [FlightTimeRange]
            Decoders.addDecoder(clazz: [FlightTimeRange].self) { (source: AnyObject) -> [FlightTimeRange] in
                return Decoders.decode(clazz: [FlightTimeRange].self, source: source)
            }
            // Decoder for FlightTimeRange
            Decoders.addDecoder(clazz: FlightTimeRange.self) { (source: AnyObject) -> FlightTimeRange in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FlightTimeRange()
                instance.min = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min"])
                instance.max = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max"])
                return instance
            }
        }
    }
}
